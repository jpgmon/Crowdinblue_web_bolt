---
export interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "CrowdInBlue connects water projects with the right funding sources, helping NGOs, innovators, and communities access the financial resources they need."
} = Astro.props;

// Default meta image
const image = "/images/social-preview.jpg";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://crowdinblue.org/" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://crowdinblue.org/" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Theme script (must be in head) -->
    <script is:inline>
      // Get stored theme or default to 'auto'
      const getStoredTheme = () => localStorage.getItem('theme') || 'auto';
      
      // Apply theme
      const applyTheme = (theme) => {
        // If auto, check system preference
        if (theme === 'auto') {
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.setAttribute('data-theme', 'dark');
          } else {
            document.documentElement.setAttribute('data-theme', 'light');
          }
        } else {
          document.documentElement.setAttribute('data-theme', theme);
        }
      };
      
      // Apply theme on load
      applyTheme(getStoredTheme());
      
      // Listen for system preference changes when in auto mode
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
        if (getStoredTheme() === 'auto') {
          applyTheme('auto');
        }
      });
    </script>
  </head>
  <body>
    <slot />
    
    <script>
      // Theme toggle functionality
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggle = document.getElementById('theme-toggle');
        const themeOptions = document.querySelectorAll('.theme-option');
        
        if (themeToggle && themeOptions) {
          // Set active class on current theme
          const currentTheme = localStorage.getItem('theme') || 'auto';
          document.querySelector(`.theme-option[data-theme="${currentTheme}"]`)?.classList.add('active');
          
          // Toggle theme menu
          themeToggle.addEventListener('click', () => {
            document.getElementById('theme-menu')?.classList.toggle('show');
          });
          
          // Theme option click handlers
          themeOptions.forEach(option => {
            option.addEventListener('click', () => {
              const theme = option.getAttribute('data-theme');
              
              // Store theme preference
              localStorage.setItem('theme', theme);
              
              // Apply theme
              if (theme === 'auto') {
                if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                  document.documentElement.setAttribute('data-theme', 'dark');
                } else {
                  document.documentElement.setAttribute('data-theme', 'light');
                }
              } else {
                document.documentElement.setAttribute('data-theme', theme);
              }
              
              // Update active class
              themeOptions.forEach(opt => opt.classList.remove('active'));
              option.classList.add('active');
              
              // Hide menu
              document.getElementById('theme-menu')?.classList.remove('show');
            });
          });
          
          // Close menu when clicking outside
          document.addEventListener('click', (e) => {
            if (!themeToggle.contains(e.target) && !document.getElementById('theme-menu')?.contains(e.target)) {
              document.getElementById('theme-menu')?.classList.remove('show');
            }
          });
        }
      });
    </script>
    
    <style is:global>
      :root {
        /* Light theme variables */
        --primary: #1E4B7E;
        --primary-light: #5B8DC0;
        --primary-lighter: #A7CCED;
        --secondary: #34A0A4;
        --accent: #F9A826;
        --background: #FFFFFF;
        --card-bg: #F8F9FA;
        --text: #333333;
        --text-light: #666666;
        --border: rgba(0, 0, 0, 0.1);
        --header-bg: rgba(255, 255, 255, 0.95);
        --footer-bg: #1E4B7E;
        --footer-text: #FFFFFF;
      }
      
      [data-theme="dark"] {
        /* Dark theme variables */
        --primary: #5B8DC0;
        --primary-light: #A7CCED;
        --primary-lighter: #1E4B7E;
        --secondary: #34A0A4;
        --accent: #F9A826;
        --background: #121212;
        --card-bg: #1E1E1E;
        --text: #E0E0E0;
        --text-light: #A0A0A0;
        --border: rgba(255, 255, 255, 0.1);
        --header-bg: rgba(18, 18, 18, 0.95);
        --footer-bg: #0A1929;
        --footer-text: #E0E0E0;
      }
      
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      html {
        font-family: 'Inter', system-ui, sans-serif;
        scroll-behavior: smooth;
        scroll-padding-top: 80px;
      }
      
      body {
        background-color: var(--background);
        color: var(--text);
        line-height: 1.6;
        transition: background-color 0.3s ease, color 0.3s ease;
      }
      
      a {
        color: var(--primary);
        text-decoration: none;
        transition: color 0.3s ease;
      }
      
      img {
        max-width: 100%;
        height: auto;
      }
      
      .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
      }
      
      section {
        padding: 5rem 0;
      }
      
      h1, h2, h3, h4, h5, h6 {
        line-height: 1.2;
        margin-bottom: 1rem;
        color: var(--text);
        transition: color 0.3s ease;
      }
      
      p {
        margin-bottom: 1.5rem;
      }
      
      .btn {
        display: inline-block;
        padding: 0.8rem 1.5rem;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
      }
      
      .btn-primary {
        background-color: var(--primary);
        color: white;
        border: 2px solid var(--primary);
      }
      
      .btn-primary:hover {
        background-color: transparent;
        color: var(--primary);
      }
      
      .btn-outline {
        background-color: transparent;
        color: var(--primary);
        border: 2px solid var(--primary);
      }
      
      .btn-outline:hover {
        background-color: var(--primary);
        color: white;
      }
      
      .section-title {
        font-size: 2.5rem;
        margin-bottom: 2rem;
        position: relative;
        display: inline-block;
      }
      
      .section-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 0;
        width: 60px;
        height: 3px;
        background-color: var(--primary);
      }
      
      /* Theme toggle styles */
      .theme-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--primary);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
      }
      
      .theme-toggle:hover {
        background-color: var(--primary-light);
      }
      
      .theme-menu {
        position: fixed;
        bottom: 70px;
        right: 20px;
        background-color: var(--card-bg);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 0.5rem;
        z-index: 1000;
        display: none;
        transition: all 0.3s ease;
      }
      
      .theme-menu.show {
        display: block;
      }
      
      .theme-option {
        padding: 0.5rem 1rem;
        cursor: pointer;
        border-radius: 4px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: background-color 0.3s ease;
      }
      
      .theme-option:hover {
        background-color: var(--border);
      }
      
      .theme-option.active {
        background-color: var(--primary-lighter);
        color: white;
      }
      
      @media (max-width: 768px) {
        .section-title {
          font-size: 2rem;
        }
        
        section {
          padding: 3rem 0;
        }
      }
    </style>
  </body>
</html>
